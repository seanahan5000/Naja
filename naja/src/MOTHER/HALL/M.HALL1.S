BUFFPNT			EQU	$00				;POINTER TO HALL STORAGE BUFFER 
DEPTH			EQU	$00				;DEPTH COUNTER
SHFTBIT			EQU	$04				;# OF BITS SHIFTED TO ALIGN BUFFER 
LRFLAG			EQU	$04				;LEFT/RIGHT FLAG USED WHEN DRAWING
MODBIT			EQU	$06				;COUNTER FOR INCREMENTING BYTE DEPTH 
LINOFF			EQU	$06				;# OF OFFSET LINES WHEN YPOS IS 1
SCRATCH			EQU	$06				;MISC. STORAGE AREA
INTBYTE			EQU	$08				;INT(BYTES BEFORE XPOS/8)*8 
ADJMNT1			EQU	$08
DUMMY			EQU	$09
WESTINT			EQU	$09				;INTBYTE VALUE DURING WEST ROUTINE
HOLDER			EQU	$09				;TEMP STORAGE FOR CURRENT HALF SEGMENT
LEFTFLG			EQU	$0B				;TEMP STORAGE FOR LEFT SIDE OF HALL
ADJMNTA			EQU	$0B
RGHTFLG			EQU	$0C				;TEMP STORAGE FOR RIGHT SIDE OF HALL
ADJMNTB			EQU	$0C
BEGINL			EQU	$0D				;WORKING BEGINNING OF BUFFER (LOW) 
WORKMBL			EQU	$0D				;WORKING MAIN BUFFER (LOW) 
XYDATAL			EQU	$0D				;POINTER TO COORDINATE DATA (LOW)
BEGINH			EQU	$0E				;WORKING BEGINNING OF BUFFER (HIGH) 
WORKMBH			EQU	$0E				;WORKING MAIN BUFFER (HIGH) 
XYDATAH			EQU	$0E				;POINTER TO COORDINATE DATA (HIGH)
FARLEFT			EQU	$11				;TEMPORARY STORAGE FOR FARLEFT BYTE 
EDGE			EQU	$11				;FLAG FOR LINE HITTING END OF SCREEN 
COLISSN			EQU	$12				;FLAG FOR IF COLISSN OCCURED BEFORE
LEFT			EQU	$12				;TEMPORARY STORAGE FOR LEFT BYTE 
MNBOFF			EQU	$12				;MAIN BUFFER OFFSET 
MPLIER			EQU	$12				;MULTIPLIER FOR MULTPLY SUBROUTINE 
SHFTFLG			EQU	$12				;FLAG TO SHIFT EXTRA TWO BITS IN WEST
CENTER			EQU	$13				;TEMPORARY STORAGE FOR CENTER BYTE 
SECBOFF			EQU	$13				;SECONDARY BUFFER OFFSET 
MPLCAND			EQU	$13				;MULTIPLICAND FOR MULTPLY SUBROUTINE 
RIGHT			EQU	$14				;TEMPORARY STORAGE FOR RIGHT BYTE 
MPLANSL			EQU	$14				;MULTIPLICATION ANSWER (LOW) 
XYDATL2			EQU	$14				;SECOND POINTER TO COORD DATA (LOW)
FARRGHT			EQU	$15				;TEMPORARY STORAGE FOR FARRGHT BYTE 
XYDATH2			EQU	$15				;SECOND POINTER TO COORD DATA (HIGH)
BITDPTH			EQU	$16				;PRESENT DEPTH OF HALL IN BITS 
READPNT			EQU	$16				;POINTER TO BUFFER USED IN HALLDRAW
BYTDPTH			EQU	$17				;PRESENT DEPTH IN BYTES
ENDMARK			EQU	$17				;FLAG FOR IF END OF HALL REACHED
CLIPFLG			EQU	$18				;FLAG HIDDEN LINES ON LEFT OR RIGHT
ADJMNT2			EQU	$19
HIDEX			EQU	$1A				;MAX LENGTH HOLDER (LOW)
HIDEXHI			EQU	$1B				;MAX LENGTH HOLDER (HIGH)

MASK76			EQU	$C0				;#11000000 
MASK21			EQU	$03				;#00000011 
SPLMASK			EQU	$04				;#00000100 
SPHMASK			EQU	$20				;#00100000 
OPESPEC			EQU	$C3				;#11000010
BLGMASK			EQU	$18				;#00011000 
DEBULGE			EQU	$E7				;#11100111
TOPMASK			EQU	$F0				;#11110000 


***MAIN-CONTROLLER-ROUTINE***

TO_RDKEY		JMP	RDKEY
TO_GETNSEW		JMP	GETNSEW
TO_SCANONE		JMP	SCANONE
TO_NOSCAN		JMP	NOSCAN
TO_NOSCAN_NF	JMP	NOSCAN_NOFILL	;***TEMP????

RDKEY			INC	RANDOM1
				LDA	KEYBRD
				BPL	RDKEY
GOTDIRECTN		BIT	UNSTROB
				JSR	CHECK_DOWN
				BEQ	AROUND
				JSR	CHECK_UP
				BEQ	FORWARD
				JSR	CHECK_LEFT
				BNE	NOLEFT
GOLEFT			JMP	LLEFT
NOLEFT			JSR	CHECK_RIGHT
				BNE	NORIGHT
GORITE			JMP	RRIGHT
NORIGHT			CMP	#"S"
				BNE	RDKEY
				JSR	TO_PRIMARY
				JMP	STATTER

AROUND			LDA	DIRECTN			;FLIP DIRECTION
				EOR	#$0F
				STA	DIRECTN
				JSR	GETNSEW			;SET BUFFER FOR HALL
				JSR	PCHECK
				CMP	#$FF
				BEQ	:1
				JSR	SCANONE
:1				JMP	RDKEY
FORWARD			LDX	#$04			;CHECK FOR WALL  TO BLOCK MOVEMENT
				LDA	BUFFER,X
				CMP	#$FF
				BNE	NOWALL
				INX					;CHECK NEXT BYTE
				LDA	BUFFER,X
				AND	#MASK76
				CMP	#$80			;IS IT A DOOR?
				BNE	BEEPER			;NO, THEN BEEP
				JSR	FORWRD
				JMP	INDOOR	

BEEPER			LDA	#$50
				STA	COUNT
:LOOP1			STA	CLICK
				LDA	#$05
				JSR	WAIT
				DEC	COUNT
				BNE	:LOOP1
				JMP	RDKEY	

NOWALL			JSR	ADVANCE			;SHIFT ALL BYTES IN BUFFER AHEAD TWO
				JSR	FORWRD
				JSR	PCHECK2	
				CMP	#$FF
				BEQ	:1
				JSR	SCANONE
:1				JMP	RDKEY
LLEFT			LDX	#$00			;CHANGE DIRECTION
				BEQ	LRCOMN			;Always
RRIGHT			LDX	#$04			;CHANGE DIRECTION
LRCOMN			JSR	CHNGDRT
INDOOR			JSR	GETNSEW			;SET UP A BUFFER FOR HALL
				JSR	PCHECK
				CMP	#$FF
				BEQ	:1
				JSR	SCANONE
:1				JMP	RDKEY

FORWRD			LDA	DIRECTN			;ADJUST POSITION FORWARD
				ASL
				BCS	ESWS1
				LSR
				LSR
				BCS	SOUTH1
				DEC	YPOS
				RTS
SOUTH1			INC	YPOS
				RTS
ESWS1			LSR
				LSR
				BCS	EAST1
				DEC	XPOS
				RTS
EAST1			INC	XPOS
				RTS
CHNGDRT			LDA	DIRECTN			;CHANGE DIRECTION ACCORDING TO
				ASL					;  STARTING AND ENDING DIRECTIONS
				BCS	ESWS2
				LSR
				LSR
				BCS	SOUTH2
				LDA	TABLE,X
				STA	DIRECTN
				JMP	LEAVEIT
SOUTH2			LDA	TABLE+1,X
				STA	DIRECTN
				JMP	LEAVEIT
ESWS2			LSR
				LSR
				BCS	EAST2
				LDA	TABLE+3,X
				STA	DIRECTN
				JMP	LEAVEIT
EAST2			LDA	TABLE+2,X
				STA	DIRECTN
LEAVEIT			RTS
TABLE			DB	$F0,$FF			;NORTH1, SOUTH1
				DB	$00,$0F			;EAST1, WEST1
				DB	$FF,$F0			;NORTH2, SOUTH2
				DB	$0F,$00			;EAST2, WEST2
ADVANCE			LDX	#$02			;SHIFT EACH BYTE TWO UP
SLIDEIT			LDA	BUFFER,X
				DEX	
				DEX
				STA	BUFFER,X
				INX	
				INX
				INX
				CMP	#$FF
				BEQ	NOSLIDE
				JMP	SLIDEIT
NOSLIDE			LDA	BUFFER,X
				DEX
				DEX
				STA	BUFFER,X
				RTS
***END-OF-MAIN-CONTROLLER-ROUTINE***
***BEGINNING-OF-ROUTINE-TO-CALL-N,-S,-E,-OR-W***
GETNSEW			LDA	DIRECTN			;CALL APPROPRIATE ROUTINE
				ASL					;BASED ON DIRECTN
				BCS	ESWS			;(THIS ROUTINE DOED NOT RETURN FORM
				LSR					;HERE BUT FROM N, S, E, OR W)
				LSR
				BCS	GOSOUTH
				JMP	NORTH			;JUMP TO NORTH ROUTINE
GOSOUTH			JMP	SOUTH			;JUMP TO SOUTH ROUTINE
ESWS			LSR
				LSR
				BCS	GOEAST
				JMP	WEST			;JUMP TO WEST ROUTINE
GOEAST			JMP	EAST			;JUMP TO EAST ROUTINE
***END-OF-ROUTINE-TO-CALL-N,-S,-E,-OR-W***
***NORTH-ROUTINE-ENTRANCE-POINT***
NORTH			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				LDA	#$00
				STA	BITDPTH			;CLEAR DEPTH COUNTER
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
NEXT1			JSR	NORTHSO
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				LDA	BEGINL			;SUBTRACT ONE LINE
				SEC					;FROM WORKING BEGINNING
				SBC	BYTEWID
				STA	BEGINL
				LDA	BEGINH
				SBC	#$00
				STA	BEGINH			;FOR NEXT SLICE
				JMP	NEXT1			;DO IT AGAIN
***END-OF-NORTH-ROUTINE***
***SOUTH-ROUTINE-ENTRANCE-POINT***
SOUTH			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				LDA	#$00
				STA	BITDPTH			;CLEAR DEPTH COUNTER
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
NEXT2			JSR	NORTHSO
				LDX	LEFT
				LDA	RIGHT
				STA	LEFT
				STX	RIGHT
				LDX	FARLEFT
				LDA	FARRGHT
				STA	FARLEFT
				STX	FARRGHT
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				LDA	BEGINL			;ADD ONE LINE
				CLC					;TO WORKING BEGINNING
				ADC	BYTEWID
				STA	BEGINL
				LDA	BEGINH
				ADC	#$00
				STA	BEGINH			;FOR NEXT SLICE
				JMP	NEXT2
***END-OF-SOUTH-ROUTINE***
***BEGINNING-OF-NORTH/SOUTH-SUBROUTINE***
NORTHSO			LDY	#$00
				LDA	(BEGINL),Y		;MOVE INFO FROM MAIN BUFFER
				STA	RIGHT			;TO RIGHT LOCATION
				INY
				LDA	(BEGINL),Y
				STA	LEFT			;AND LEFT
				LDA	DIRECTN
				LSR
				BCC	SUBTRCT
				LDA	BEGINL
				CLC
				ADC	BYTEWID
				STA	BEGINL
				LDA	BEGINH
				ADC	#$00
				STA	BEGINH
				JMP	MORE
SUBTRCT			LDA	BEGINL
				SEC
				SBC	BYTEWID
				STA	BEGINL
				LDA	BEGINH
				SBC	#$00
				STA	BEGINH
MORE			LDY	#$00
				LDA	(BEGINL),Y
				STA	FARRGHT			;AND FARRIGHT
				INY
				LDA	(BEGINL),Y
				STA	FARLEFT			;AND FARLEFT
				LDA	SHFTBIT			;COMPENSATE FOR OFFSET BITS
				TAY
				BEQ	SKIPIT
LOOPA			ASL	LEFT
				ROL	RIGHT
				ASL	FARLEFT
				ROL	FARRGHT
				DEY
				BNE	LOOPA			;IF NOT FINISHED THE LOOP 
SKIPIT			LDA	LEFT			;SHIFT TWO BITS FROM RIGHT
				ASL	RIGHT			;INTO LEFT
				ROL
				ASL	RIGHT
				ROL
				CLC
				ROR
				ROR
				ROR
				STA	LEFT
				LDA	FARLEFT			;SHIFT TWO BITS FROM FARRIGHT
				ASL	FARRGHT			;TO FAR LEFT
				ROL
				ASL	FARRGHT
				ROL
				CLC
				ROR
				ROR
				ROR
				STA	FARLEFT
				LDA	CENTER
				ASL	FARRGHT
				ROL
				ASL	FARRGHT
				ROL
				CLC
				ROR
				ROR
				ROR
				STA	CENTER
				RTS
***END-OF-NORTH/SOUTH-SUBROUTINE***
***EAST-ROUTINE-ENTRANCE-POINT***
EAST			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				JSR	EASWEST			;JUMP TO SECONDARY BUFFER MAKER
				LDA	#$00			;CLEAR DEPTH COUNTERS
				STA	BYTDPTH
				STA	BITDPTH
				STA	MODBIT
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER 
SLICER			LDA	MODBIT
				BNE	JUMPSUB
				LDX	BYTDPTH
				LDY	#$00
SLICE			LDA	SECBUFF,X		;START TAKING A SLICE
				STA	FARLEFT,Y
				INY
				TXA
				CLC
				ADC	BYTEWID
				TAX
				CPY	#$05			;ALL DONE? 
				BNE	SLICE			;NO, THEN REPEAT
JUMPSUB			JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				INC	MODBIT
				LDA	MODBIT
				CMP	#$04
				BNE	:1
				LDA	#$00
				STA	MODBIT
				INC	BYTDPTH
:1				LDX	#$00			;Was SHIFT
:2				ASL	FARLEFT,X		;SHIFT ALL FIVE LOCATIONS
				ASL	FARLEFT,X		;TWO BITS EACH FOR NEXT SEGEMENT
				INX
				CPX	#$05
				BNE	:2
				JMP	SLICER			;GOBACK AND CHECK NEXT SLICE
***END-OF-EAST-SUBROUTINE***
***WEST-ROUTINE-ENTRANCE-POINT***
WEST			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				JSR	EASWEST			;JUMP TO SECONDARY BUFFER MAKER
				LDA	#$00			;CLEAR DEPTH COUNTERS
				STA	BITDPTH
				STA	MODBIT
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
				LDA	BYTEWID			;SET BYTE DEPTH COUNTER TO
				STA	BYTDPTH			;BYTE WIDTH AND WORK BACK TO ZERO
SLICER2			LDA	MODBIT
				BNE	HALLJMP			;NO, THEN GOTOHALLWAY SUBROUTINE
				LDX	BYTDPTH
				DEX
				LDY	#$05
SLICE2			DEY
				LDA	SECBUFF,X
				STA	FARLEFT,Y
				TXA
				CLC
				ADC	BYTEWID
				TAX
				CPY	#$00			;ALL DONE?
				BNE	SLICE2			;NO, THEN REPEAT
				LDX	#$00
FLIP1			LDY	#$00			;FLIP THE FARLEFT THROUGH FARRIGHT
				STY	DUMMY
FLIP2			ASL	FARLEFT,X
				ROR	DUMMY
				INY
				CPY	#$08
				BNE	FLIP2
				LDA	DUMMY
				STA	FARLEFT,X
				INX
				CPX	#$05
				BNE	FLIP1
HALLJMP			LDX	#$00
SWITCH			LDA	FARLEFT,X		;FLIP BITS 6 AND 7
				ASL
				ROL	DUMMY
				ASL
				PHP
				LSR	DUMMY
				ROR
				PLP
				ROR
				STA	FARLEFT,X
				INX
				CPX	#$05
				BNE	SWITCH
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				INC	MODBIT
				LDA	MODBIT
				CMP	#$04
				BNE	SHIFT2
				LDA	#$00
				STA	MODBIT
				DEC	BYTDPTH
SHIFT2			LDX	#$00
SHFTER2			ASL	FARLEFT,X		;SHIFT ALL FIVE LOCATIONS
				ASL	FARLEFT,X		;TWO BITS EACH FOR NEXT SEGMENT
				INX
				CPX	#$05
				BNE	SHFTER2
				JMP	SLICER2			;GOBACK AND CHECK NEXT SLICE
***END-OF-WEST-SUBROUTINE***
***BUFFER-MAKER-FOR-EAST-AND-WEST***
EASWEST			LDX	#$00
				LDY	#$00
				LDA	YPOS			;CALCULATE TRUE YPOS
				ASL
				SEC
				SBC	#$03
				STA	LINOFF
				BPL	NOADJST			;TO BE OFFSET
				LDA	#$01	
				STA	LINOFF
				PHA
				JMP	OFFSET
NOADJST			LDA	LINOFF
				STA	MPLCAND
				LDA	BYTEWID			;STORE MULTIPLICAND
				STA	MPLIER
				JSR	MULTPLY
				PHA					;PUSH ANSWER HIGH BYTE 
				LDA	MPLANSL			;ADD ANSWER TO
				CLC
				ADC	WORKMBL			;WORKING MAIN BUFFER LOCATION START
				STA	WORKMBL
				PLA
				ADC	WORKMBH
				STA	WORKMBH
				LDA	#$00
				STA	LINOFF
				PHA
				JMP	MOVER
OFFSET			CMP	#$00			;ADD OFFSET LINES
				BEQ	MOVER
				TXA
				CLC
				ADC	BYTEWID
				TAX
MOVER			LDA	DIRECTN			;***SPLITTING POINT FOR EAST AND WEST
				LSR
				BCC	WESTPRT
				JMP	EASTPRT
WESTPRT			LDA	#$06
				SEC
				SBC	SHFTBIT
				STA	SHFTBIT
				LDA	BYTEWID
				SEC
				SBC	INTBYTE
				SBC	#$01
				STA	WESTINT
				LDA	BYTEWID
				PHA
OFFSADD			TXA					;ADD INTBYTE OFFSET TO X REGISTER
				CLC
				ADC	WESTINT
				TAX
BYTMOVE			LDA	(WORKMBL),Y
				STA	SECBUFF,X
				INX
				INY
				DEC	BYTEWID
				LDA	BYTEWID
				CMP	WESTINT			;IS A COMPLETE LINE MOVED?
				BNE	BYTMOVE			;NO, THEN CONTINUE
				INC	LINOFF			;ARE ALL LINES COMPLETED?
				LDA	#$05
				CMP	LINOFF
				BEQ	SHFTR			;IF NOT, THEN DO DOME MORE
				TYA					;IF SO, SET UP OFFSET FOR NEXTLINE
				CLC
				ADC	WESTINT
				TAY
				PLA
				PHA
				STA	BYTEWID
				JMP	OFFSADD
SHFTR			PLA					;BEGIN SHIFTING ACCORDING TO SHIFTBIT
				STA	BYTEWID
				PLA
				PHA
				STA	LINOFF
				LDX	#$00
				LDA	LINOFF			;ADD OFFSET TO X REGISTER
				BEQ	SHFTREL
				TXA
				CLC
				ADC	BYTEWID
				TAX
SHFTREL			LDA	SHFTBIT
				BNE	PUSHER			;IF NO SHIFTING NEEDED THEN END
				LDA	#$02
				STA	SHFTBIT
				LDA	LINOFF
				LSR
				BCS	MORADJ
MORSHFT			JSR	SHFTSUB
				DEC	SHFTBIT
				TXA
				SEC
				SBC	BYTEWID
				TAX
				LDA	SHFTBIT
				BNE	MORSHFT
MORADJ			INC	LINOFF
				LDA	#$02
				STA	SHFTBIT
				TXA
				CLC
				ADC	BYTEWID
				TAX
				LDA	LINOFF
				CMP	#$05
				BNE	NOEND2	
				JMP	END2
NOEND2			LSR
				BCC	MORSHFT
				JMP	MORADJ
PUSHER			PHA
				LDA	#$00
				STA	SHFTFLG
GOSHSUB			JSR	SHFTSUB
				DEC	SHFTBIT
				TXA
				SEC
				SBC	BYTEWID
				TAX
				LDA	SHFTBIT	
				BNE	GOSHSUB			;NO, THEN GIVE IT SOMEMORE 
				LDA	LINOFF
				LSR
				BCS	NEXTLIN
				LDA	#$FF
				CMP	SHFTFLG
				BEQ	NEXTLIN
				STA	SHFTFLG
				LDA	#$02
				STA	SHFTBIT
				JMP	GOSHSUB	
NEXTLIN			PLA
				PHA
				STA	SHFTBIT			;RESTORE SHIFTBIT VALUE
				LDA	#$00
				STA	SHFTFLG
				INC	LINOFF
				TXA
				CLC
				ADC	BYTEWID
				TAX
				LDA	#$05
				CMP	LINOFF			;ALL FIVE LINES DONE?
				BNE	GOSHSUB			;NO, THEN DO ANOTHER ONE
				JMP	END				;YES, THEN END
SHFTSUB			LDY	BYTEWID			;SHIFT FIRST BYTE
				LSR	SECBUFF,X
				INX
				DEY
LEFTROT			ROR	SECBUFF,X		;ROTATE THE REST
				INX
				DEY
				BNE	LEFTROT			;IF WHOLE LINE NOT MOVED THEN DO AGAIN
				RTS
EASTPRT			LDA	BYTEWID			;SET UP OFFSET FOR MAIN BUFFER
				SEC
				SBC	INTBYTE
				STA	MNBOFF
				PHA
				LDA	BYTEWID			;AND SECONDARY BUFFER OFFSET 
				STA	SECBOFF
ADDOFF			TYA					;BEGIN MOVE
				CLC
				ADC	INTBYTE
				TAY
MOVEBYT			LDA	(WORKMBL),Y
				STA	SECBUFF,X
				DEC	MNBOFF
				DEC	SECBOFF
				INY
				INX
				LDA	MNBOFF	
				BNE	MOVEBYT
				INC	LINOFF			;ARE ALL LINES COMPLETE? 
				LDA	#$05
				CMP	LINOFF
				BEQ	:1				;IF NOT THEN DO SOME MORE
				TXA					;IF SO, SET UP OFFSETS FOR NEXTLINE
				CLC
				ADC	SECBOFF
				TAX
				PLA
				PHA
				STA	MNBOFF
				LDA	BYTEWID
				STA	SECBOFF
				JMP	ADDOFF
:1				PLA
				LDX	#$00			;BEGIN SHIFTING ACCORDING TO SHFTBIT
				PLA
				STA	LINOFF
				PHA
				BEQ	REALSHF
				TXA
				CLC
				ADC	BYTEWID
				TAX
REALSHF			LDA	SHFTBIT			;PREPARE FOR SHIFTING
				BEQ	END2
				PHA
				DEX
ROWSHFT			TXA
				CLC					;ADD BEGINNING OFFSET
				ADC	BYTEWID
				TAX
				LDY	BYTEWID
				ASL	SECBUFF,X		;SHIFTING A ZERO
				DEX
				DEY
ROTLEFT			ROL	SECBUFF,X		;ROTATE RIGHT
				DEX
				DEY
				BNE	ROTLEFT			;IF NOT FINISHED WITH LINE THEN GOBACK
				DEC	SHFTBIT
				LDA	SHFTBIT	
				BNE	ROWSHFT			;NO, THEN GO BACK
				PLA
				STA	SHFTBIT			;RESTORE SHIFT BIT COUNTER
				PHA
				INC	LINOFF			;ALL FIVE LINES DONE? 
				LDA	#$05
				CMP	LINOFF
				BEQ	END				;YES, THEN GOTO END
				TXA
				CLC
				ADC	BYTEWID
				TAX
				JMP	ROWSHFT			;NO, THEN DO MORE
END				PLA					;PULL STRAY BYTES OUT OF STACK
END2			PLA
				RTS
***END-OF-BUFFER-MAKER***
***SECONDARY-BUFFER***
SECBUFF			DB	$00,$00,$00,$00,$00,$00
				DB	$00,$00,$00,$00,$00,$00,$00
				DB	$00,$00,$00,$00,$00,$00,$00
				DB	$00,$00,$00,$00,$00,$00,$00
				DB	$00,$00,$00,$00,$00,$00,$00
***END-OF-SECONDARY-BUFFER***
***BEGINNING-ADDRESS-CALCULATOR***
BACALC			LDA	FACBYTE			;MULTIPLY THE BYTES PER FACE BY
				STA	MPLCAND
				LDA	FACE			;THE FACE-1
				STA	MPLIER
				DEC	MPLIER
				JSR	MULTPLY
				STA	BEGINH			;STORE ANSWER IN WORKING BEGINNING
				LDA	MPLANSL
				STA	BEGINL			;HIGH AND LOW 
				LDA	#<MOTHER_MAP	;ADD THE BEGINNING OF MAIN BUFFER
				CLC
				ADC	BEGINL
				STA	BEGINL			;HIGH AND LOW
				LDA	#>MOTHER_MAP
				ADC	BEGINH
				STA	BEGINH
				BIT	DIRECTN
				BMI	EWCALC
				LDA	XPOS			;CALCULATE THE NUMBER OF OFFSET BYTES
				SEC					;(XPOS-1)*2/8
				SBC	#$01
				LSR
				LSR
				PHA					;PUSH OFFSET BYTES
				CLC
				ADC	BEGINL			;AND ADD TO WORKING BEGINNING
				STA	BEGINL
				LDA	#$00
				ADC	BEGINH			;LOW AND HIGH
				STA	BEGINH
				LDA	YPOS
				ASL
				STA	MPLIER			;MULTIPLY YPOS*2-1
				DEC	MPLIER
				LDA	BYTEWID
				STA	MPLCAND			;BY BYTEWID
				JSR	MULTPLY
				PHA
				LDA	MPLANSL
				CLC
				ADC	BEGINL			;ADD TO WORKING BEGINNING
				STA	BEGINL
				PLA
				ADC	BEGINH			;LOW AND HIGH
				STA	BEGINH
				PLA					;PULL OFFSET BYTES
				ASL					;CALCULATE THE NUMBER OF BITS SHIFTED
				ASL
				ASL
				STA	INTBYTE
				LDA	XPOS
				SEC
				SBC	#$01
				ASL
				SEC
				SBC	INTBYTE
				STA	SHFTBIT			;AND STORE IN SHIFTBIT
				JMP	RETURN
EWCALC			LDA	XPOS			;CALCULATE THE NUMBER OF OFFSET BYTES
				LSR					;XPOS*2/8
				LSR
				STA	INTBYTE
				ASL
				ASL
				ASL
				STA	SHFTBIT
				LDA	XPOS
				ASL
				SEC
				SBC	SHFTBIT
				STA	SHFTBIT
RETURN			RTS
***END-OF-BEGINNING-ADDRESS-CALCULATING-SUBROUTINE***
***8-BIT-BY-8-BIT-MULTIPLICATION-SUBROUTINE***
MULTPLY			LDA	MPLIER			;CHECK FOR ZERO MPLIER AND OR MPLCAND
				BEQ	ZERO
				LDA	MPLCAND
				BEQ	ZERO
				JMP	SETUP
ZERO			LDA	#$00			;SET ANSWER TO ZERO
				STA	MPLANSL
				JMP	OUT
SETUP			LDA	#$00			;CHECK FOR ZERO MPLIER AND MPLCAND
				LDX	#$08
NXTBT			LSR	MPLIER
				BCC	ALIGN
				CLC
				ADC	MPLCAND
ALIGN			LSR
				ROR	MPLANSL
				DEX
				BNE	NXTBT			;REMEMBER TO STORE ACCUMULATOR
OUT				RTS					;UPON RETURN OF THIS SUBTROUTINE
***END-OF-MULTIPLICATION-SUBROUTINE***
