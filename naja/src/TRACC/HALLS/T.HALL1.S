				JMP	RDKEY
				JMP	GETNSEW
				JMP	SCANONE
				JMP	NOSCAN
				JMP	PNTCALL			;THESE ARE NO
				JMP	HLINE2			;  LONGER NEEDED (GREEN NET FIXED)

RDKEY			INC	RANDOM1
				LDA	KEYBRD
				BPL	RDKEY
				BIT	UNSTROB	
				JSR	CHECK_DOWN
				BEQ	AROUND
				JSR	CHECK_UP
				BEQ	FORWARD
				JSR	CHECK_LEFT
				BNE	NOLEFT			;LEFT ARROW PUSHED
GOLLEFT			JMP	LLEFT
NOLEFT			JSR	CHECK_RIGHT
				BNE	NORIGHT			;RIGHT ARROW PUSHED
GORRGHT			JMP	RRIGHT
NORIGHT			CMP	#$D3			;S PRESSED 
				BEQ	GOTOCAMP
				CMP	#$C6
				BEQ	GOFACER	
				CMP	#$D4
				BEQ	GOTESS
				CMP	#$D2
				BEQ	GOARANG
				JMP	RDKEY
GOTOCAMP		JMP	CAMP_VECTOR
GOFACER			JMP	FACER	
GOTESS			JMP	TESBACK
GOARANG			JMP	ADJRANG
AROUND			LDA	DIRECTN			;FLIP DIRECTION
				EOR	#$0F
				STA	DIRECTN
				JSR	GETNSEW			;SET BUFFER FOR HALL
				JSR	PCHECK
				CMP	#$FF
				BEQ	RERDKEY
				BNE	RDBACK	
FORWARD			LDX	#$04			;CHECK FOR WALL  TO BLOCK MOVEMENT
				LDA	BUFFER,X
				CMP	#$FF
				BNE	NOWALL
				INX					;CHECK NEXT BYTE
				LDA	BUFFER,X
				AND	#$E0	
				CMP	#$20
				BNE	NOTFC
				JMP	FCHANGE
NOTFC			CMP	#$80			;IS IT A DOOR?
				BNE	SOUND			;NO, THEN BEEP
				JSR	DORFACE
				JSR	FORWRD
				JSR	GETNSEW			;SET UP A BUFFER FOR HALL
				JSR	PCHECK3	
				CMP	#$FF
				BEQ	RERDKEY
RDBACK			JSR	HGR				;CLEAR SCREEN
				JSR	NOSCAN
				JMP	RDKEY
SOUND			JSR	BLIP			;BLIP IF WALL IS PRESENT
				JMP	RDKEY
NOWALL			JSR	ADVANCE			;SHIFT ALL BYTES IN BUFFER AHEAD TWO
				JSR	FORWRD
				JSR	PCHECK2	
				CMP	#$FF
				BEQ	RERDKEY
				JSR	SCANONE
				JMP	RDKEY
LLEFT			LDX	#$00			;CHANGE DIRECTION
				JSR	CHNGDRT
				JSR	GETNSEW			;SET UP BUFFER FOR HALL
				JSR	PCHECK
				CMP	#$FF
				BEQ	RERDKEY
				JSR	HGR				;CLEAR SCREEN
				JSR	NOSCAN			;DRAW A HALL
				JMP	RDKEY
RRIGHT			LDX	#$04			;CHANGE DIRECTION
				JSR	CHNGDRT
				JSR	GETNSEW			;SET UP A BUFFER FOR HALL
				JSR	PCHECK
				CMP	#$FF
				BEQ	RERDKEY
				JSR	HGR				;CLEAR SCREEN
				JSR	NOSCAN
RERDKEY			JMP	RDKEY			;READ ANOTHER KEY
FORWRD			LDA	DIRECTN			;ADJUST POSITION FORWARD
				ASL	A
				BCS	ESWS1
				LSR	A
				LSR	A
				BCS	SOUTH1
				DEC	YPOS
				JMP	DONE
SOUTH1			INC	YPOS
				JMP	DONE
ESWS1			LSR	A
				LSR	A
				BCS	EAST1
				DEC	XPOS
				JMP	DONE
EAST1			INC	XPOS
DONE			RTS
CHNGDRT			LDA	DIRECTN			;CHANGE DIRECTION ACCORDING TO 
				ASL	A				;STARTING AND ENDING DIRECTIONS
				BCS	ESWS2
				LSR	A
				LSR	A
				BCS	SOUTH2
				LDA	TABLE,X
				STA	DIRECTN
				JMP	LEAVEIT
SOUTH2			LDA	TABLE+1,X
				STA	DIRECTN
				JMP	LEAVEIT
ESWS2			LSR	A
				LSR	A
				BCS	EAST2
				LDA	TABLE+3,X
				STA	DIRECTN
				JMP	LEAVEIT
EAST2			LDA	TABLE+2,X
				STA	DIRECTN
LEAVEIT			RTS
TABLE			DFB	$F0,$FF			;NORTH1, SOUTH1
				DFB	$00,$0F			;EAST1, WEST1
				DFB	$FF,$F0			;NORTH2, SOUTH2
				DFB	$0F,$00			;EAST2, WEST2
ADVANCE			LDX	#$02			;SHIFT EACH BYTE TWO UP
SLIDEIT			LDA	BUFFER,X
				DEX	
				DEX
				STA	BUFFER,X
				INX	
				INX
				INX
				CMP	#$FF
				BEQ	NOSLIDE
				JMP	SLIDEIT
NOSLIDE			LDA	BUFFER,X
				DEX
				DEX
				STA	BUFFER,X
				RTS
***END-OF-MAIN-CONTROLLER-ROUTINE***
***BEGINNING-OF-ROUTINE-TO-CALL-N,-S,-E,-OR-W***
GETNSEW			LDA	BYTEWID
				STA	BYTWID0
				LDA	DIRECTN			;CALL APPROPRIATE ROUTINE
				ASL	A				;BASED ON DIRECTN
				BCS	ESWS			;(THIS ROUTINE DOED NOT RETURN FORM
				LSR	A				;HERE BUT FROM N, S, E, OR W)
				LSR	A
				BCS	GOSOUTH
				JMP	NORTH			;JUMP TO NORTH ROUTINE
GOSOUTH			JMP	SOUTH			;JUMP TO SOUTH ROUTINE
ESWS			LSR	A
				LSR	A
				BCS	GOEAST
				JMP	WEST			;JUMP TO WEST ROUTINE
GOEAST			JMP	EAST			;JUMP TO EAST ROUTINE
***END-OF-ROUTINE-TO-CALL-N,-S,-E,-OR-W***
***NORTH-ROUTINE-ENTRANCE-POINT***
NORTH			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				LDA	#$00
				STA	BITDPTH			;CLEAR DEPTH COUNTER
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
NEXT1			JSR	NORTHSO
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				LDA	BEGINL			;SUBTRACT ONE LINE
				SEC					;FROM WORKING BEGINNING
				SBC	BYTWID0
				STA	BEGINL
				LDA	BEGINH
				SBC	#$00
				STA	BEGINH			;FOR NEXT SLICE
				JMP	NEXT1			;DO IT AGAIN
***END-OF-NORTH-ROUTINE***
***SOUTH-ROUTINE-ENTRANCE-POINT***
SOUTH			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				LDA	#$00
				STA	BITDPTH			;CLEAR DEPTH COUNTER
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
NEXT2			JSR	NORTHSO
				LDX	LEFT
				LDA	RIGHT
				STA	LEFT
				STX	RIGHT
				LDX	FARLEFT
				LDA	FARRGHT
				STA	FARLEFT
				STX	FARRGHT
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				LDA	BEGINL			;ADD ONE LINE
				CLC					;TO WORKING BEGINNING
				ADC	BYTWID0
				STA	BEGINL
				LDA	BEGINH
				ADC	#$00
				STA	BEGINH			;FOR NEXT SLICE
				JMP	NEXT2
***END-OF-SOUTH-ROUTINE***
***BEGINNING-OF-NORTH/SOUTH-SUBROUTINE***
NORTHSO			LDY	#$00
				LDA	(BEGINL),Y		;MOVE INFO FROM MAIN BUFFER
				STA	RIGHT			;TO RIGHT LOCATION
				INY
				LDA	(BEGINL),Y
				STA	LEFT			;AND LEFT
				LDA	DIRECTN
				LSR	A
				BCC	SUBTRCT
				LDA	BEGINL
				CLC
				ADC	BYTWID0
				STA	BEGINL
				LDA	BEGINH
				ADC	#$00
				STA	BEGINH
				JMP	MORE
SUBTRCT			LDA	BEGINL
				SEC
				SBC	BYTWID0
				STA	BEGINL
				LDA	BEGINH
				SBC	#$00
				STA	BEGINH
MORE			LDY	#$00
				LDA	(BEGINL),Y
				STA	FARRGHT			;AND FARRIGHT
				INY
				LDA	(BEGINL),Y
				STA	FARLEFT			;AND FARLEFT
				LDA	SHFTBIT			;COMPENSATE FOR OFFSET BITS
				TAY
				BEQ	SKIPIT
LOOPA			ASL	LEFT
				ROL	RIGHT
				ASL	FARLEFT
				ROL	FARRGHT
				DEY
				BNE	LOOPA			;IF NOT FINISHED THE LOOP 
SKIPIT			LDA	LEFT			;SHIFT TWO BITS FROM RIGHT
				ASL	RIGHT			;INTO LEFT
				ROL	A
				ASL	RIGHT
				ROL	A
				CLC
				ROR	A
				ROR	A
				ROR	A
				STA	LEFT
				LDA	FARLEFT			;SHIFT TWO BITS FROM FARRIGHT
				ASL	FARRGHT			;TO FAR LEFT
				ROL	A
				ASL	FARRGHT
				ROL	A
				CLC
				ROR	A
				ROR	A
				ROR	A
				STA	FARLEFT
				LDA	CENTER
				ASL	FARRGHT
				ROL	A
				ASL	FARRGHT
				ROL	A
				CLC
				ROR	A
				ROR	A
				ROR	A
				STA	CENTER
				RTS
***END-OF-NORTH/SOUTH-SUBROUTINE***
***EAST-ROUTINE-ENTRANCE-POINT***
EAST			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				JSR	EASWEST			;JUMP TO SECONDARY BUFFER MAKER
				LDA	#$00			;CLEAR DEPTH COUNTERS
				STA	BYTDPTH
				STA	BITDPTH
				STA	MODBIT
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER 
SLICER			LDA	MODBIT
				BNE	JUMPSUB
				LDX	BYTDPTH
				LDY	#$00
SLICE			LDA	SECBUFF,X		;START TAKING A SLICE
				STA	FARLEFT,Y
				INY
				TXA
				CLC
				ADC	BYTWID0
				TAX
				CPY	#$05			;ALL DONE? 
				BNE	SLICE			;NO, THEN REPEAT
JUMPSUB			JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				INC	MODBIT
				LDA	MODBIT
				CMP	#$04
				BNE	SHIFTZ	
				LDA	#$00
				STA	MODBIT
				INC	BYTDPTH
SHIFTZ			LDX	#$00
SHIFTR1			ASL	FARLEFT,X		;SHIFT ALL FIVE LOCATIONS
				ASL	FARLEFT,X		;TWO BITS EACH FOR NEXT SEGEMENT
				INX
				CPX	#$05
				BNE	SHIFTR1
				JMP	SLICER			;GOBACK AND CHECK NEXT SLICE
***END-OF-EAST-SUBROUTINE***
***WEST-ROUTINE-ENTRANCE-POINT***
WEST			JSR	BACALC			;JUMP TO BEGINNING ADDRESS CALCULATOR
				JSR	EASWEST			;JUMP TO SECONDARY BUFFER MAKER
				LDA	#$00			;CLEAR DEPTH COUNTERS
				STA	BITDPTH
				STA	MODBIT
				LDA	#$02
				STA	BUFFPNT			;AND STORAGE POINTER
				LDA	BYTWID0			;SET BYTE DEPTH COUNTER TO
				STA	BYTDPTH			;BYTE WIDTH AND WORK BACK TO ZERO
SLICER2			LDA	MODBIT
				BNE	HALLJMP			;NO, THEN GOTOHALLWAY SUBROUTINE
				LDX	BYTDPTH
				DEX
				LDY	#$05
SLICE2			DEY
				LDA	SECBUFF,X
				STA	FARLEFT,Y
				TXA
				CLC
				ADC	BYTWID0
				TAX
				CPY	#$00			;ALL DONE?
				BNE	SLICE2			;NO, THEN REPEAT
				LDX	#$00
FLIPA			LDY	#$00			;FLIP THE FARLEFT THROUGH FARRIGHT
				STY	DUMMY
FLIPB			ASL	FARLEFT,X
				ROR	DUMMY
				INY
				CPY	#$08
				BNE	FLIPB
				LDA	DUMMY
				STA	FARLEFT,X
				INX
				CPX	#$05
				BNE	FLIPA
HALLJMP			LDX	#$00
SWITCH			LDA	FARLEFT,X		;FLIP BITS 6 AND 7
				ASL	A
				ROL	DUMMY
				ASL	A
				PHP
				LSR	DUMMY
				ROR	A
				PLP
				ROR	A
				STA	FARLEFT,X
				INX
				CPX	#$05
				BNE	SWITCH
				JSR	HALLWAY			;JUMP TO HALLWAY SUBROUTINE
				INC	MODBIT
				LDA	MODBIT
				CMP	#$04
				BNE	SHIFT2
				LDA	#$00
				STA	MODBIT
				DEC	BYTDPTH
SHIFT2			LDX	#$00
SHFTER2			ASL	FARLEFT,X		;SHIFT ALL FIVE LOCATIONS
				ASL	FARLEFT,X		;TWO BITS EACH FOR NEXT SEGMENT
				INX
				CPX	#$05
				BNE	SHFTER2
				JMP	SLICER2			;GOBACK AND CHECK NEXT SLICE
***END-OF-WEST-SUBROUTINE***
***BUFFER-MAKER-FOR-EAST-AND-WEST***
EASWEST			LDX	#$00
				LDY	#$00
				LDA	YPOS			;CALCULATE TRUE YPOS
				ASL	A
				SEC
				SBC	#$03
				STA	LINOFF
				BPL	NOADJST			;TO BE OFFSET
				LDA	#$01	
				STA	LINOFF
				PHA
				JMP	OFFSET
NOADJST			LDA	LINOFF
				STA	MPLCAND
				LDA	BYTWID0			;STORE MULTIPLICAND
				STA	TMPLIER
				JSR	TMULTIPLY
				PHA					;PUSH ANSWER HIGH BYTE 
				LDA	MPLANSL			;ADD ANSWER TO
				CLC
				ADC	WORKMBL			;WORKING MAIN BUFFER BEGINNING
				STA	WORKMBL
				PLA
				ADC	WORKMBH
				STA	WORKMBH
				LDA	#$00
				STA	LINOFF
				PHA
				JMP	MOVER
OFFSET			CMP	#$00			;ADD OFFSET LINES
				BEQ	MOVER
				TXA
				CLC
				ADC	BYTWID0
				TAX
MOVER			LDA	DIRECTN			;***SPLITTING POINT FOR EAST AND WEST
				LSR	A
				BCC	WESTPRT
				JMP	EASTPRT
WESTPRT			LDA	#$06
				SEC
				SBC	SHFTBIT
				STA	SHFTBIT
				LDA	BYTWID0
				SEC
				SBC	INTBYTE
				SBC	#$01
				STA	WESTINT
				LDA	BYTWID0
				PHA
OFFSADD			TXA					;ADD INTBYTE OFFSET TO X REGISTER
				CLC
				ADC	WESTINT
				TAX
BYTMOVE			LDA	(WORKMBL),Y
				STA	SECBUFF,X
				INX
				INY
				DEC	BYTWID0
				LDA	BYTWID0
				CMP	WESTINT			;IS A COMPLETE LINE MOVED?
				BNE	BYTMOVE			;NO, THEN CONTINUE
				INC	LINOFF			;ARE ALL LINES COMPLETED?
				LDA	#$05
				CMP	LINOFF
				BEQ	SHFTR			;IF NOT, THEN DO DOME MORE
				TYA					;IF SO, SET UP OFFSET FOR NEXTLINE 
				CLC
				ADC	WESTINT
				TAY
				PLA
				PHA
				STA	BYTWID0
				JMP	OFFSADD
SHFTR			PLA					;BEGIN SHIFTING ACCORDING TO SHIFTBIT
				STA	BYTWID0
				PLA
				PHA
				STA	LINOFF
				LDX	#$00
				LDA	LINOFF			;ADD OFFSET TO X REGISTER
				BEQ	SHFTREL
				TXA
				CLC
				ADC	BYTWID0
				TAX
SHFTREL			LDA	SHFTBIT
				BNE	PUSHER			;IF NO SHIFTING NEEDED THEN END
				LDA	#$02
				STA	SHFTBIT
				LDA	LINOFF
				LSR	A
				BCS	MORADJ
MORSHFT			JSR	SHFTSUB
				DEC	SHFTBIT
				TXA
				SEC
				SBC	BYTWID0
				TAX
				LDA	SHFTBIT
				BNE	MORSHFT
MORADJ			INC	LINOFF
				LDA	#$02
				STA	SHFTBIT
				TXA
				CLC
				ADC	BYTWID0
				TAX
				LDA	LINOFF
				CMP	#$05
				BNE	NOEND2	
				JMP	END2
NOEND2			LSR	A
				BCC	MORSHFT
				JMP	MORADJ
PUSHER			PHA
				LDA	#$00
				STA	SHFTFLG
GOSHSUB			JSR	SHFTSUB
				DEC	SHFTBIT
				TXA
				SEC
				SBC	BYTWID0
				TAX
				LDA	SHFTBIT	
				BNE	GOSHSUB			;NO, THEN GIVE IT SOMEMORE 
				LDA	LINOFF
				LSR	A
				BCS	NEXTLIN
				LDA	#$FF
				CMP	SHFTFLG
				BEQ	NEXTLIN
				STA	SHFTFLG
				LDA	#$02
				STA	SHFTBIT
				JMP	GOSHSUB	
NEXTLIN			PLA
				PHA
				STA	SHFTBIT			;RESTORE SHIFTBIT VALUE
				LDA	#$00
				STA	SHFTFLG
				INC	LINOFF
				TXA
				CLC
				ADC	BYTWID0
				TAX
				LDA	#$05
				CMP	LINOFF			;ALL FIVE LINES DONE?
				BNE	GOSHSUB			;NO, THEN DO ANOTHER ONE
				JMP	END				;YES, THEN END
SHFTSUB			LDY	BYTWID0			;SHIFT FIRST BYTE
				LSR	SECBUFF,X
				INX
				DEY
LEFTROT			ROR	SECBUFF,X		;ROTATE THE REST
				INX
				DEY
				BNE	LEFTROT			;IF LINE NOT MOVED THEN DO IT AGAIN 
				RTS
EASTPRT			LDA	BYTWID0			;SET UP OFFSET FOR MAIN BUFFER
				SEC
				SBC	INTBYTE
				STA	MNBOFF
				PHA
				LDA	BYTWID0			;AND SECONDARY BUFFER OFFSET 
				STA	SECBOFF
ADDOFF			TYA					;BEGIN MOVE
				CLC
				ADC	INTBYTE
				TAY
MOVEBYT			LDA	(WORKMBL),Y
				STA	SECBUFF,X
				DEC	MNBOFF
				DEC	SECBOFF
				INY
				INX
				LDA	MNBOFF	
				BNE	MOVEBYT
				INC	LINOFF			;ARE ALL LINES COMPLETE? 
				LDA	#$05
				CMP	LINOFF
				BEQ	SHFTRZ2			;IF NOT THEN DO SOME MORE
				TXA					;IF SO, SET UP OFFSETS FOR NEXTLINE
				CLC
				ADC	SECBOFF
				TAX
				PLA
				PHA
				STA	MNBOFF
				LDA	BYTWID0
				STA	SECBOFF
				JMP	ADDOFF
SHFTRZ2			PLA
				LDX	#$00			;BEGIN SHIFTING ACCORDING TO SHFTBIT
				PLA
				STA	LINOFF
				PHA
				BEQ	REALSHF
				TXA
				CLC
				ADC	BYTWID0
				TAX
REALSHF			LDA	SHFTBIT			;PREPARE FOR SHIFTING
				BEQ	END2
				PHA
				DEX
ROWSHFT			TXA
				CLC					;ADD BEGINNING OFFSET
				ADC	BYTWID0
				TAX
				LDY	BYTWID0
				ASL	SECBUFF,X		;SHIFTING A ZERO
				DEX
				DEY
ROTLEFT			ROL	SECBUFF,X		;ROTATE RIGHT
				DEX
				DEY
				BNE	ROTLEFT			;IF NOT FINISHED WITH LINE THEN GOBACK
				DEC	SHFTBIT
				LDA	SHFTBIT	
				BNE	ROWSHFT			;NO, THEN GO BACK
				PLA
				STA	SHFTBIT			;RESTORE SHIFT BIT COUNTER
				PHA
				INC	LINOFF			;ALL FIVE LINES DONE? 
				LDA	#$05
				CMP	LINOFF
				BEQ	END				;YES, THEN GOTO END
				TXA
				CLC
				ADC	BYTWID0
				TAX
				JMP	ROWSHFT			;NO, THEN DO MORE
END				PLA					;PULL STRAY BYTES OUT OF STACK
END2			PLA
				RTS
***END-OF-BUFFER-MAKER***
***SECONDARY-BUFFER***
SECBUFF			DFB	$00,$00,$00,$00,$00,$00
				DFB	$00,$00,$00,$00,$00,$00,$00
				DFB	$00,$00,$00,$00,$00,$00,$00
				DFB	$00,$00,$00,$00,$00,$00,$00
				DFB	$00,$00,$00,$00,$00,$00,$00
***END-OF-SECONDARY-BUFFER***
***BEGINNING-ADDRESS-CALCULATOR***
BACALC			LDA	FACBYTE			;MULTIPLY THE BYTES PER FACE BY
				STA	TMPLIER
				LDA	FACE			;THE FACE-1
				STA	MPLCAND	
				DEC	MPLCAND	
				JSR	TMULTIPLY
				STA	BEGINH			;STORE ANSWER IN WORKING BEGINNING
				LDA	MPLANSL
				STA	BEGINL			;HIGH AND LOW 
				LDA	MAPSPOT			;ADD THE BEGINNING OF MAIN BUFFER
				CLC
				ADC	BEGINL
				STA	BEGINL			;HIGH AND LOW
				LDA	MAPSPOT+1	
				ADC	BEGINH
				STA	BEGINH
				BIT	DIRECTN
				BMI	EWCALC
				LDA	XPOS			;CALCULATE THE NUMBER OF OFFSET BYTES
				SEC					;(XPOS-1)*2/8
				SBC	#$01
				LSR	A
				LSR	A
				PHA					;PUSH OFFSET BYTES
				CLC
				ADC	BEGINL			;AND ADD TO WORKING BEGINNING
				STA	BEGINL
				LDA	#$00
				ADC	BEGINH			;LOW AND HIGH
				STA	BEGINH
				LDA	YPOS
				ASL	A
				STA	TMPLIER			;MULTIPLY YPOS*2-1
				DEC	TMPLIER
				LDA	BYTWID0
				STA	MPLCAND			;BY BYTWID0
				JSR	TMULTIPLY
				PHA
				LDA	MPLANSL
				CLC
				ADC	BEGINL			;ADD TO WORKING BEGINNING
				STA	BEGINL
				PLA
				ADC	BEGINH			;LOW AND HIGH
				STA	BEGINH
				PLA					;PULL OFFSET BYTES
				ASL	A				;CALCULATE THE NUMBER OF BITS SHIFTED
				ASL	A
				ASL	A
				STA	INTBYTE
				LDA	XPOS
				SEC
				SBC	#$01
				ASL	A
				SEC
				SBC	INTBYTE
				STA	SHFTBIT			;AND STORE IN SHIFTBIT
				JMP	RETURN
EWCALC			LDA	XPOS			;CALCULATE THE NUMBER OF OFFSET BYTES
				LSR	A				;XPOS*2/8 
				LSR	A
				STA	INTBYTE
				ASL	A
				ASL	A
				ASL	A
				STA	SHFTBIT
				LDA	XPOS
				ASL	A
				SEC
				SBC	SHFTBIT
				STA	SHFTBIT
RETURN			RTS
***END-OF-BEGINNING-ADDRESS-CALCULATING-SUBROUTINE***
***8-BIT-BY-8-BIT-MULTIPLICATION-SUBROUTINE***
TMULTIPLY		LDA	TMPLIER			;CHECK FOR ZERO TMPLIER AND OR MPLCAND
				BEQ	ZERO
				LDA	MPLCAND
				BEQ	ZERO
				JMP	SETUP
ZERO			LDA	#$00			;SET ANSWER TO ZERO
				STA	MPLANSL
				JMP	OUT
SETUP			LDA	#$00			;CHECK FOR ZERO TMPLIER AND MPLCAND
				LDX	#$08
NXTBT			LSR	TMPLIER
				BCC	ALIGN
				CLC
				ADC	MPLCAND
ALIGN			LSR	A
				ROR	MPLANSL
				DEX
				BNE	NXTBT			;REMEMBER TO STORE ACCUMULATOR
OUT				RTS					;UPON RETURN OF THIS SUBTROUTINE
***END-OF-MULTIPLICATION-SUBROUTINE***
